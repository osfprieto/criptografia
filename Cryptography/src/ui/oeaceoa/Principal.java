package ui.oeaceoa;

import java.awt.Color;
import cryptography.*;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Tato
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     *
     */
 public String cipherTxt;
    public String plainText;
    private String keySubstitution;
    private String keyHill;
    private String clearTextHill;
    private int k1Affine;
    private int k2Affine;
    private String keyPerm;
 //   private Matrix clearD;
    
    public Principal() {
        initComponents();
        inicioDefault();
        this.setTitle("Criptosistema - Oscar Acero");
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpPrincipal = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taPlainText = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        taCipherText = new javax.swing.JTextArea();
        lblPlainText = new javax.swing.JLabel();
        lblCipherText = new javax.swing.JLabel();
        cbCifrar = new javax.swing.JCheckBox();
        cbDescifrar = new javax.swing.JCheckBox();
        jpOptions = new javax.swing.JPanel();
        cboxOptions = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        taPlainText.setColumns(20);
        taPlainText.setRows(5);
        jScrollPane1.setViewportView(taPlainText);

        taCipherText.setColumns(20);
        taCipherText.setRows(5);
        jScrollPane2.setViewportView(taCipherText);

        lblPlainText.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPlainText.setText("Texto Plano");

        lblCipherText.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblCipherText.setText("Texto Cifrado");

        cbCifrar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cbCifrar.setText("Cifrar");
        cbCifrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCifrarActionPerformed(evt);
            }
        });

        cbDescifrar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cbDescifrar.setText("Descifrar");
        cbDescifrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDescifrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpPrincipalLayout = new javax.swing.GroupLayout(jpPrincipal);
        jpPrincipal.setLayout(jpPrincipalLayout);
        jpPrincipalLayout.setHorizontalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                    .addGroup(jpPrincipalLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cbCifrar)))
                .addGap(18, 18, 18)
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDescifrar))
                .addContainerGap())
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addComponent(lblPlainText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblCipherText, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(188, 188, 188))
        );
        jpPrincipalLayout.setVerticalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCifrar)
                    .addComponent(cbDescifrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPlainText)
                    .addComponent(lblCipherText))
                .addGap(18, 18, 18)
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)))
        );

        jpOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Criptosistema", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18))); // NOI18N
        jpOptions.setName("Opciones"); // NOI18N

        cboxOptions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione", "Desplazamiento", "Sustitución", "Vigenere", "Hill", "Afin", "Permutación", "SDES" }));
        cboxOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxOptionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpOptionsLayout = new javax.swing.GroupLayout(jpOptions);
        jpOptions.setLayout(jpOptionsLayout);
        jpOptionsLayout.setHorizontalGroup(
            jpOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboxOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jpOptionsLayout.setVerticalGroup(
            jpOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOptionsLayout.createSequentialGroup()
                .addComponent(cboxOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpPrincipal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(444, 444, 444)
                .addComponent(jpOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jpOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbCifrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCifrarActionPerformed
        // TODO add your handling code here:
        cbDescifrar.setSelected(false);
        taCipherText.setEditable(false);
        taCipherText.setText("");
        taPlainText.setText("");
        taPlainText.setEditable(true);
        cboxOptions.setSelectedIndex(0);
        
    }//GEN-LAST:event_cbCifrarActionPerformed

    private void cbDescifrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDescifrarActionPerformed
        // TODO add your handling code here:
        cbCifrar.setSelected(false);
        taCipherText.setEditable(true);
        taPlainText.setEditable(false);
        taPlainText.setText("");
        cboxOptions.setSelectedIndex(0);        
        
    }//GEN-LAST:event_cbDescifrarActionPerformed
    
    private void cboxOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxOptionsActionPerformed
            // TODO add your handling code here:
        if (cboxOptions.getSelectedIndex() == 1) {            
            if (cbCifrar.isSelected() == true) {
                ShiftCipherDialog dialog = new ShiftCipherDialog(this, true);
                dialog.setPlainText(this.taPlainText.getText());
                dialog.setVisible(true);
                try
                {
                    this.taCipherText.setText(dialog.getCipherText());
                }
                 catch(Exception e)
                 {
                 
                 }
            } else if (cbDescifrar.isSelected() == true) {
                ShiftDecipherDialog dialog = new ShiftDecipherDialog(this, true);
                dialog.setCipherText(this.taCipherText.getText());
                dialog.setVisible(true);
                
                this.taPlainText.setText(dialog.getPlainText());
            }
        } else if (cboxOptions.getSelectedIndex() == 3) {
            if (cbCifrar.isSelected() == true) {
                VigenereCipherDialog dialog = new VigenereCipherDialog(this, true);
                dialog.setPlainText(this.taPlainText.getText());
                dialog.setVisible(true);
                try
                {
                    this.taCipherText.setText(dialog.getCipherText().toUpperCase());
                }
                 catch(Exception e)
                 {
                 
                 }               
                
            } else if (cbDescifrar.isSelected() == true) {
                
                VigenereDecipherDialog dialog = new VigenereDecipherDialog(this, true);
                dialog.setCipherText(this.taCipherText.getText().toLowerCase());
                dialog.setVisible(true);
                try
                {
                    this.taPlainText.setText(dialog.getPlainText());
                }
                catch(Exception e)
                {}
            }
        }
        else if(cboxOptions.getSelectedIndex() == 2)
        {
             SubstitutionCipherDialog dialogC = new SubstitutionCipherDialog(this, true);
              
            if (cbCifrar.isSelected() == true) {
                dialogC.setPlainText(this.taPlainText.getText());
                dialogC.setVisible(true);
                try
                {
                    this.taCipherText.setText(dialogC.getCipherText().toUpperCase().replace(" ", ""));
                    this.keySubstitution = dialogC.getKey();
                }
                catch(Exception e)
                {}
            } 
            else if (cbDescifrar.isSelected() == true) {
                SubstitutionDecipherDialog dialogD = new SubstitutionDecipherDialog(this, true, this.keySubstitution);  
                dialogD.setCipherText(this.taCipherText.getText());
                dialogD.setKey(this.keySubstitution);
                dialogD.setVisible(true);
                try
                {
                    this.taPlainText.setText(dialogD.getPlainText().replace(" ", ""));
                }
                catch(Exception e)
                {}
            }
        }
        else if(cboxOptions.getSelectedIndex() == 4)
        {
            HillCipherDialog dialogC = new HillCipherDialog(this, true);
            if (cbCifrar.isSelected() == true) 
            {
                dialogC.setPlainText(this.taPlainText.getText());
                this.clearTextHill = dialogC.getPlainText();
                //this.clearD = dialogC.getClearD();
                
                dialogC.setVisible(true);
                try
                {
                    this.taCipherText.setText(dialogC.getCipherText().toUpperCase());
                    this.keyHill = dialogC.getKey();
                }
                 catch(Exception e)
                 {
                 
                 }         
            }
            else if(cbDescifrar.isSelected() == true)
            {
              HillDecipherDialog dialogD = new HillDecipherDialog(this, true, this.keyHill);
               dialogD.setCipherText(this.taCipherText.getText().toLowerCase());
                dialogD.setKey(this.keyHill);
                dialogD.setPlainText(this.clearTextHill);
//                dialogD.setM(clearD);
                dialogD.setVisible(true);
                try
                {
                    this.taPlainText.setText(dialogD.getPlainText().replace(" ", ""));
                }
                catch(Exception e)
                {}
            
            }
        }
        else if(cboxOptions.getSelectedIndex() == 5)
        {
            AffineCipherDialog dialogC = new AffineCipherDialog(this, true);
            if(cbCifrar.isSelected() == true)
            {
                dialogC.setPlainText(this.taPlainText.getText());
                dialogC.setVisible(true);
                try
                {
                    this.taCipherText.setText(dialogC.getCipherText().toUpperCase().replace(" ", ""));
                    this.k1Affine = dialogC.getKey1();
                    this.k2Affine = dialogC.getKey2();
                }
                catch(Exception e)
                {}
            }
            else if(cbDescifrar.isSelected() == true)
            {
                AffineDecipherDialog dialogD = new AffineDecipherDialog(this, true, this.k1Affine, this.k2Affine);
                dialogD.setCipherText(this.taCipherText.getText());
                dialogD.setKey1(this.k1Affine);
                dialogD.setKey2(this.k2Affine);
                dialogD.setVisible(true);
                try
                {
                    this.taPlainText.setText(dialogD.getPlainText().replace(" ", ""));
                }
                catch(Exception e)
                {}
            
            }
        }
        
        else if(cboxOptions.getSelectedIndex() == 6)
        {
               PermutationCipherDialog dialogC = new PermutationCipherDialog(this, true);
            if(cbCifrar.isSelected() == true)
            { 
                if (cbCifrar.isSelected() == true) {
                    dialogC.setPlainText(this.taPlainText.getText());
                    dialogC.setVisible(true);
                    try
                    {
                        this.taCipherText.setText(dialogC.getCipherText().toUpperCase());
                        this.keyPerm = dialogC.getKey();
                    }
                    catch(Exception e)
                    {}
                }
            }
                  else if(cbDescifrar.isSelected() == true)
                {
                    PermutationDecipherDialog dialogD = new PermutationDecipherDialog(this, true, this.keyPerm);
                    dialogD.setCipherText(this.taCipherText.getText().toLowerCase());
                    dialogD.setKey(this.keyPerm);
                    dialogD.setVisible(true);
                    try
                    {
                        this.taPlainText.setText(dialogD.getPlainText().replace(" ", ""));
                    }
                    catch(Exception e)
                    {}
            }
        }
        else if(cboxOptions.getSelectedIndex() == 7)
        {
                if (cbCifrar.isSelected() == true) {
                    SDESDialogCipher dialogC = new SDESDialogCipher(this, true);
                    dialogC.setPlainText(((this.taPlainText.getText()).replaceAll("[^A-Za-z]+", "")).toLowerCase());
                    dialogC.setCifrar(true);
                    dialogC.setVisible(true);
                    try
                    {
                        JOptionPane.showMessageDialog(this, "El texto cifrado se muestra en hexadecimal");
                        this.taCipherText.setText(dialogC.getCipherText().toUpperCase());
                        //this.keyPerm = dialogC.getKey();
                    }
                    catch(Exception e)
                    {}
                }
                 else if(cbDescifrar.isSelected() == true)
                {
                    SDESDialogCipher dialogD = new SDESDialogCipher(this, true);
                    dialogD.setPlainText(this.taCipherText.getText());
                    dialogD.setCifrar(false);
                    dialogD.setVisible(true);
                    try
                    {
                        //JOptionPane.showMessageDialog(this, "El texto cifrado se muestra en hexadecimal");
                        this.taPlainText.setText(dialogD.getCipherText());
                        //this.keyPerm = dialogC.getKey();
                    }
                    catch(Exception e)
                    {}
                }
            }
                 
        
    }//GEN-LAST:event_cboxOptionsActionPerformed
    
    private void inicioDefault() {
        taCipherText.setEditable(false);
        taPlainText.setEditable(false);
    }
    
    public String getCipherText() {
        return this.taCipherText.getText();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbCifrar;
    private javax.swing.JCheckBox cbDescifrar;
    private javax.swing.JComboBox cboxOptions;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel jpOptions;
    private javax.swing.JPanel jpPrincipal;
    private javax.swing.JLabel lblCipherText;
    private javax.swing.JLabel lblPlainText;
    private javax.swing.JTextArea taCipherText;
    private javax.swing.JTextArea taPlainText;
    // End of variables declaration//GEN-END:variables

}
